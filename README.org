* Berns

[[https://badge.fury.io/rb/berns][https://badge.fury.io/rb/berns.svg]]
[[https://github.com/evanleck/berns/actions/workflows/main.yml][https://github.com/evanleck/berns/actions/workflows/main.yml/badge.svg]]

A utility library for generating HTML strings.

** Installation

Add this line to your application's Gemfile:

#+begin_src ruby
gem 'berns'
#+end_src

And then execute:

#+begin_src sh
bundle
#+end_src

Or install it yourself as:

#+begin_src sh
gem install berns
#+end_src

** Usage

Note that all return string values will be UTF-8 encoded.

*** =void(tag, attributes)=

The =void= method generates a void HTML element i.e. one without any content. It
takes either a symbol or a string and an optional hash of HTML attributes.

#+begin_src ruby
Berns.void('br') # => '<br>'
Berns.void('br', class: 'br-class') # => '<br class="br-class">'
#+end_src

*** =element(tag, attributes) { content }=

The =element= method generates a standard HTML element i.e. one with optional
content. It takes either a symbol or a string, an optional hash of HTML
attributes, and an optional block of content. If provided, the block should
return a string.

#+begin_src ruby
Berns.element('div') # => '<div></div>'
Berns.element('div', class: 'div-class') # => '<div class="div-class"></div>'
Berns.element('div', class: 'div-class') { 'Content' } # => '<div class="div-class">Content</div>'
#+end_src

*** =to_attribute(attribute, value)=

The =to_attribute= method generates an HTML attribute string. If the value is a
hash then the attribute is treated as a prefix.

#+begin_src ruby
Berns.to_attribute('class', 'my-class another-class') # => 'class="my-class another-class"'
Berns.to_attribute('data', { foo: 'bar' }) # => 'data-foo="bar"'
#+end_src

All attribute values are HTML-escaped using [[https://github.com/k0kubun/hescape][k0kubun/hescape]] written by Takashi
Kokubun.

*** =to_attributes(attributes)=

The =to_attributes= method generates an HTML attribute string from a hash by
calling =to_attribute= for each key/value pair.

#+begin_src ruby
Berns.to_attributes({ 'data' => { foo: 'bar' }, 'class' => 'my-class another-class' }) # => 'data-foo="bar" class="my-class another-class"'
#+end_src

*** =escape_html(string)=

The =escape_html= method escapes HTML entities in strings using [[https://github.com/k0kubun/hescape][k0kubun/hescape]]
written by Takashi Kokubun. As noted in the hescape repository, it should be the
same as =CGI.escapeHTML=.

#+begin_src ruby
Berns.escape_html('<"tag"') # => '&lt;&quot;tag&quot;'
#+end_src

*** =sanitize(string)=

The =sanitize= method strips HTML tags from strings.

#+begin_src ruby
Berns.sanitize('This <span>should be clean</span>') # => 'This should be clean'
#+end_src

Note that this is an extremely naive implementation of HTML sanitization that
literally just looks for "<" and ">" characters and removes the contents between
them. This should probably only be used on trusted strings.

*** =build { content }=

The =build= method uses =Berns::Builder= to let you create HTML strings using a DSL.

#+begin_src ruby
Berns.build { h1 { 'Heading' } } # => '<h1>Heading</h1>'
#+end_src

See below for more on =Berns::Builder=.

*** =Berns::Builder= HTML DSL

Added in version 3.4.0 and heavily inspired by the likes of [[https://github.com/digital-fabric/papercraft][Papercraft]], [[https://github.com/markaby/markaby][Markaby]],
and [[https://github.com/activeadmin/arbre][Arbre]], the =Berns::Builder= class lets you create HTML strings using a DSL.

#+begin_src ruby
template = Berns::Builder.new do
  h1 { 'Heading' }
  p(class: 'paragraph') do
    text 'Bare text here.'

    b { 'Bold text here' }
  end
end
#+end_src

Within the block provided to =Berns::Builder.new= every standard element method,
void element method, =#element=, and =#void= are available as methods and each
time you use one of those methods the result is appended to an internal buffer.
In addition, the =#text= method can be used to append a plain text string to the
buffer and that text will be HTML escaped, so it's good for untrusted content.

Once initialized, rendering the template to a string can be done with the
=#call= method and any arguments, positional or keyword, will be passed through
as-is to the block provided to =#new=.

#+begin_src ruby
string = template.call # =>
# <h1>
#   Heading
# </h1>
# <p class='paragraph'>
#   Bare text here.
#   <b>
#     Bold text here.
#   </b>
# </p>
#+end_src

In addition to initializing a new instance of =Berns::Builder=, you can
construct and render a template to a string all at once with =Berns.build=.

#+begin_src ruby
Berns.build do
  h1 { 'Heading' }
  p(class: 'paragraph') do
    text 'Bare text here.'

    b { 'Bold text here' }
  end
end # =>
# <h1>
#   Heading
# </h1>
# <p class='paragraph'>
#   Bare text here.
#   <b>
#     Bold text here.
#   </b>
# </p>
#+end_src

*** Standard and void elements

All standard and void HTML elements are defined as methods on Berns, so you can
create e.g. a link with =Berns.a=. Below is the full list of standard elements
which are also available in the constant =Berns::STANDARD= as an array of
symbols.

#+begin_example
a abbr address article aside audio b bdi bdo blockquote body button
canvas caption cite code colgroup datalist dd del details dfn dialog div
dl dt em fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head
header html i iframe ins kbd label legend li main map mark menu meter nav
noscript object ol optgroup option output p picture pre progress q rp rt
ruby s samp script section select small span strong style sub summary
table tbody td template textarea tfoot th thead time title tr u ul var
video
#+end_example

Below is the full list of void elements that are defined as singleton methods on
Berns which are also available in the constant =Berns::VOID= as an array of
symbols.

#+begin_example
area base br col embed hr img input link menuitem meta param source track wbr
#+end_example

** Performance

Berns 3 is about three times faster than the pure Ruby implementation used in
version 2. See the file [[file:benchmarks/performance.rb][benchmarks/performance.rb]] for the benchmark code.

#+begin_example
Warming up --------------------------------------
             element    27.373k i/100ms
               berns    94.118k i/100ms
Calculating -------------------------------------
             element    314.078k (± 4.5%) i/s -      1.588M in   5.065539s
               berns    935.528k (± 6.1%) i/s -      4.706M in   5.049718s

Comparison:
               berns:   935527.9 i/s
             element:   314078.4 i/s - 2.98x  (± 0.00) slower
#+end_example

** Trivia

The name "Berns" is taken from the name of [[https://en.wikipedia.org/wiki/HTML#Development][the inventor of HTML]],
[[https://en.wikipedia.org/wiki/Tim_Berners-Lee][Sir Tim Berners-Lee]].
